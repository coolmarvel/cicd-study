# 워크 플로우 이름 지정
name: CI

# 워크 플로우가 시작될 조건 지정
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# jobs 단위로 개별 서버(정확히는 Docker 컨테이너 단위라고 한다.)에서 작업이 수행된다.
# 각 작업은 병렬로 실행 된다고 하는데, needs: build와 같이 표시해서 기다릴 수도 있다.
jobs:
  build:
    # 실행 환경 지정
    # Ubuntu, Windows, MacOS를 지원한다
    runs-on: ubuntu-latest

    # 변수 개념으로 생각하면 된다.
    # node-version 과 같이 배열로 돼있으면, 해당 원소를 순회하면서 작업이 반복해서 실행된다.
    # matrix 때문인지 배열만 되는 것 같다. (TODO)
    # 응용해서 runs-on에 여러 OS에서 돌릴 수도 있다.
    strategy:
      matrix:
        node-version: [20.x] # 템플릿 기본값: [14.x, 16.x, 20.x, ...]

    # uses 개념은 다른 사람이 작성한 내용을 실행하는 개념이다.
    # actions/checkout: GitHub의 마지막 커밋으로 Checkout 한다.
    # actions/setup-node: Node.js를 설치한다.
    # run 개념은 명령어를 실행한다. 셸 스크립트와 동일하다.
    steps:
      # uses 개념은 다른 사람이 작성한 내용을 실행하는 개념이다.
      # actions/checkout: GitHub의 마지막 커밋으로 Checkout 한다.
      # actions/setup-node: Node.js를 설치한다.
      # run 개념은 명령어를 실행한다. 셸 스크립트와 동일하다.
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Get commit
        id: git
        run: |
          echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"

      - name: User Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: npm install
      - run: npm run build --if-present
      # - run: npm run test
      # - run: npm run test:e2e
      # --if-present 옵션은 npm 스크립트가 존재할 때만 실행시키라는 의미이다.
      # 만약 build 스크립트가 없는 경우, 오류 없이 지나간다.

      - name: Git
        run: |
          echo Branch name is: ${{ github.ref_name }}
          echo Short sha: ${{ steps.git.outputs.short_sha }}
          echo Version is: ${{ steps.version.outputs.current-version }}
